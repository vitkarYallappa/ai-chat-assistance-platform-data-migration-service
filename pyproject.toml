[project]
name = "data-migration-service"
version = "0.1.0"
description = "Service for coordinating database migrations across sharded MongoDB and PostgreSQL databases"
readme = "README.md"
requires-python = ">=3.12, <3.13"
license = { file = "LICENSE" }

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch.build.targets.wheel]
packages = ["app"]

authors = [
    { name = "AI Chat Assistance Platform Team" }
]
keywords = ["migration", "database", "mongodb", "postgresql", "shard", "microservice"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.12",
]
dependencies = [
    # FastAPI and ASGI server
    "fastapi>=0.110.0",
    "uvicorn[standard]>=0.29.0",

    # Configuration and environment variables
    "pydantic>=2.7.0",
    "pydantic-settings>=2.2.1",
    "python-dotenv>=1.0.1",

    # Database drivers and ORMs
    "sqlalchemy>=2.0.30",
    "alembic>=1.13.1",
    "asyncpg>=0.29.0",
    "motor>=3.3.1",
    "pymongo>=4.6.1",

    # HTTP client for external APIs
    "httpx>=0.27.0",

    # Authentication and security
    "python-jose[cryptography]>=3.3.0",
    "passlib[bcrypt]>=1.7.4",

    # Message brokers
    "aio-pika>=9.3.0",
    "aiokafka>=0.10.0",

    # Observability
    "structlog>=23.2.0",
    "opentelemetry-api>=1.21.0",
    "opentelemetry-sdk>=1.21.0",
    "opentelemetry-instrumentation-fastapi>=0.40b0",
    "prometheus-client>=0.20.0",
    "python-json-logger>=2.0.7",

    # Utilities
    "tenacity>=8.3.0",
    "ujson>=5.9.0",
    "pytz>=2024.1",
    "aiofiles>=23.1.0",
]

[project.optional-dependencies]
dev = [
    "black>=24.3.0",
    "isort>=5.13.2",
    "flake8>=7.0.0",
    "mypy>=1.9.0",
    "pre-commit>=3.6.2",
    "bandit>=1.7.5",

    "types-redis>=4.6.0.3",
    "types-pytz>=2024.1.0.0",
    "types-aiofiles>=23.1.0.0",
    "types-ujson>=5.9.0.0",

    "mkdocs>=1.6.0",
    "mkdocs-material>=9.5.0",

    "ipython>=8.24.0",
    "rich>=13.7.1",
]

test = [
    "pytest>=8.2.0",
    "pytest-asyncio>=0.23.2",
    "pytest-cov>=4.1.0",
    "pytest-mock>=3.14.0",
    "faker>=19.13.0",
    "httpx>=0.27.0",
    "respx>=0.21.0",
    "pytest-timeout>=2.3.1",
    "freezegun>=1.4.0",
]

[tool.black]
line-length = 100
target-version = ["py312"]
include = '\.pyi?$'

[tool.isort]
profile = "black"
line_length = 100
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true

[tool.mypy]
python_version = "3.12"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
strict_optional = true

[[tool.mypy.overrides]]
module = ["tests.*"]
disallow_untyped_defs = false
disallow_incomplete_defs = false

[[tool.mypy.overrides]]
module = ["motor.*", "pymongo.*", "aiokafka.*", "aio_pika.*", "uvicorn.*", "sqlalchemy.*", "opentelemetry.*", "prometheus_client.*"]
ignore_missing_imports = true

[tool.pytest.ini_options]
minversion = "7.0"
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
asyncio_mode = "auto"
markers = [
    "unit: Unit tests",
    "integration: Integration tests",
    "e2e: End-to-end tests",
]

[tool.coverage.run]
source = ["app"]
omit = ["tests/*", "*/migrations/*", "**/__init__.py"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "pass",
    "raise ImportError",
]

[tool.hatch.metadata]
allow-direct-references = true

[tool.ruff]
line-length = 100
target-version = "py312"
select = ["E", "F", "I", "UP", "C90"]